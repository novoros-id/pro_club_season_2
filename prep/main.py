from prepare_files.prepare_files import prepare_files
from transcription_audio.transcription import Transcription
from rag_documetn_chunker.document_chunker import DocumentChunker
from rag_db.rag_index_to_chroma_db import RagIndexer
from create_file.create_docx import create_docx
from download_audio_video.download_audio_video import SynologyDownloader, YandexDownloader
from concurrent.futures import ThreadPoolExecutor
from dotenv import load_dotenv
load_dotenv()
import os

CREATE_RAG = os.getenv("CREATE_RAG")
MODEL_WHISPER = os.getenv("MODEL_WHISPER")

def process_video(url, folder):

     # 0. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if "yandex" in url or "disk.yandex" in url:
        print("üñ• –û–ø—Ä–µ–¥–µ–ª—ë–Ω –∏—Å—Ç–æ—á–Ω–∏–∫: –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫")
        downloader = YandexDownloader(url, folder)
        saved_path = downloader.download()
    else:
        print("üñ• –û–ø—Ä–µ–¥–µ–ª—ë–Ω –∏—Å—Ç–æ—á–Ω–∏–∫: QuickConnect / Synology")
        #downloader = SynologyDownloader(url, folder)
        import concurrent.futures
        with concurrent.futures.ThreadPoolExecutor() as executor:
            saved_path = executor.submit(lambda: SynologyDownloader(url, folder).download()).result()
    #download = YandexDownloader(url, folder)
    print(f"[LOG] YandexDownloader —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {saved_path}")

    # 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –∏–∑ –≤–∏–¥–µ–æ
    prep = prepare_files(saved_path)
    files = prep.process_file()
    audio_file = files['audio']  # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
    video_file = files['video']  # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
    print(f"[LOG] prepare_files —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {files}")
    
    # 2. –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
    #transcription = Transcription(model_name="antony66/whisper-large-v3-russian")
    transcription = Transcription(model_name= MODEL_WHISPER)
    transcription_json = transcription.save_json(audio_file)
    print(f"[LOG] Transcription —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {transcription_json}")
    transcription_docs = transcription.as_documents()
    print(f"[LOG] Transcription as_documents –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(transcription_docs)}")
    transcription.unload()
    
    # 3. –°–æ–∑–¥–∞–Ω–∏–µ DOCX –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
    class_create_docx = create_docx(transcription_json, video_file)
    paragraph = class_create_docx.get_docx()
    print(f"[LOG] create_docx —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {paragraph}")
    
    # 3.5 –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    if CREATE_RAG == False:
        print("[ERROR] –ù–µ —Å–æ–∑–¥–∞–µ–º —á–∞–Ω–∫–∏, –∏–∑–º–µ–Ω–∏—Ç–µ —Ñ–ª–∞–≥ —á—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å")
        return paragraph

    # 4. –°–æ–∑–¥–∞–Ω–∏–µ —á–∞–Ω–∫–æ–≤ –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
    if not transcription_docs:
        print("[ERROR] –ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞–Ω–∫–æ–≤.")
        return paragraph
    
    chunker = DocumentChunker(chunk_size=3, chunk_overlap=0.5)
    chunks = chunker.chunk(transcription_docs)
    print(f"[LOG] DocumentChunker –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤: {len(chunks)}")
    for chunk in chunks[:3]:
        print(chunk.page_content)
        print("Metadata:", chunk.metadata)

    # 5. –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è —á–∞–Ω–∫–æ–≤ –≤ CromaDB
    indexer = RagIndexer()
    manifest = indexer.index(chunks)
    print(f"[LOG] RagIndexer manifest: {manifest}")

    return paragraph

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
if __name__ == "__main__":
    video_path = '–ü—Ä–æ—Å–∫–æ–≤—å—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è_PV.mp4'
    #url = "https://pro-1c-virtualnas.quickconnect.to/d/s/14Fcxa6WJMw96JQUCRB7lPLEuIoRptvU/zFh_5S--OFIGZs-B0NaiNL_icd4HlUOm-s7SAj3ZJcgw"
    url = "https://disk.yandex.ru/i/KzF8C83q_JbcPw"
    process_video(url)
