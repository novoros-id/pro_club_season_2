from prepare_files.prepare_files import prepare_files
from transcription_audio.transcription_main import transcription_main
from rag_documetn_chunker.document_chunker_main import run_chunker
from rag_db.rag_index_to_chroma_db_main import run_index
from create_file.create_docx import create_docx
from download_audio_video.download_audio_video import SynologyDownloader, YandexDownloader
from concurrent.futures import ThreadPoolExecutor


def process_video(url, folder):

    # 0. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if "yandex" in url or "disk.yandex" in url:
        print("üñ• –û–ø—Ä–µ–¥–µ–ª—ë–Ω –∏—Å—Ç–æ—á–Ω–∏–∫: –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫")
        downloader = YandexDownloader(url, folder)
        saved_path = downloader.download()
    else:
        print("üñ• –û–ø—Ä–µ–¥–µ–ª—ë–Ω –∏—Å—Ç–æ—á–Ω–∏–∫: QuickConnect / Synology")
        #downloader = SynologyDownloader(url, folder)
        import concurrent.futures
        with concurrent.futures.ThreadPoolExecutor() as executor:
            saved_path = executor.submit(lambda: SynologyDownloader(url, folder).download()).result()
    #download = YandexDownloader(url, folder)
    print(f"[LOG] YandexDownloader —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {saved_path}")

    # 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –∏–∑ –≤–∏–¥–µ–æ
    prep = prepare_files(saved_path)
    files = prep.process_file()
    audio_file = files['audio']  # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
    video_file = files['video']  # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
    print(f"[LOG] prepare_files —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {files}")
    
    # 2. –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
    transcription_json, docs = transcription_main(return_docs=True, audio_file=audio_file)
    transcription = Transcription(model_name="large")
    transcription_json = transcription.save_json(audio_file)
    print(f"[LOG] Transcription —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {transcription_json}")

    # 3. –°–æ–∑–¥–∞–Ω–∏–µ DOCX –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞
    class_create_docx = create_docx(transcription_json, video_file)
    paragraph = class_create_docx.get_docx()
    print(f"[LOG] create_docx —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {paragraph}")

    # 4. –ß–∞–Ω–∫–∏–Ω–≥
    chunks = run_chunker(docs=docs)

    # 5. –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –≤ –±–∞–∑—É ChromaDB
    manifest = run_index(docs=chunks)
    print(f"[LOG] –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {manifest}")

    return paragraph 

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
if __name__ == "__main__":
    video_path = '–ü—Ä–æ—Å–∫–æ–≤—å—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è_PV.mp4'
    #url = "https://pro-1c-virtualnas.quickconnect.to/d/s/14Fcxa6WJMw96JQUCRB7lPLEuIoRptvU/zFh_5S--OFIGZs-B0NaiNL_icd4HlUOm-s7SAj3ZJcgw"
    url = "https://disk.yandex.ru/i/KzF8C83q_JbcPw"
    process_video(url)