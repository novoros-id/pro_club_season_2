from langchain_ollama import OllamaLLM
from langchain.callbacks.manager import CallbackManager
from langchain.callbacks.streaming_stdout import StreamingStdOutCallbackHandler
from langchain import PromptTemplate
from langchain.schema import HumanMessage


from docx import Document
from docx.shared import Mm
import os
import sys
import json

# Добавляем родительский каталог в пути поиска модулей
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
sys.path.insert(0, parent_dir)

from text_to_paragraphs.text_to_paragraphs import text_to_paragraphs
from picture_description.picture_description import picture_description

full_text = "Откроем возможность работы в Просковье в 1С. Итак, сейчас на экране вы видите корпоративную базу знаний. Мы рассмотрим, как работать на ее примере. В области раздела вы видите Просковье, вам необходимо перейти в мессенджер. Для этого нажмите «Просковье ИИ» — «Открыть мессенджер». Сейчас на экране вы видите окно мессенджера для того, чтобы можно было взаимодействовать с Просковьем. Вначале Просковье открывается в режиме обучения или в режиме, когда можно задать вопрос для того, чтобы узнать, что она умеет. Например, можно спросить, как добавить файлы, но можно спрашивать любую информацию. Очень важно, что с Прасковьей можно общаться на разные темы, очень важно понять эти темы. Как с людьми мы общаемся на разные темы, так и с Прасковьей мы можем общаться на разные темы. Для того чтобы переключить темы, необходимо нажать кнопку «Сменить темы». Например, нажимая «Сменить темы», сейчас на экране вы видите окно изменения тем. У нас есть несколько групп тем. Первая — у нас есть групповые темы. Групповые темы — это темы, которые добавляет администратор, или какоето специальное ответственное лицо, и в которые включены файлы для общей работы с этими файлами. Ну, например, здесь у нас включены инструкции администратора, и те инструкции, которые доступны в Telegram-боте администраторов, они фактически помещены сюда, и то же самое можно задавать эти вопросы здесь.Т обработать металлургическая документация, продуктовая документация и так далее. То есть мы можем выбрать эту тему и спрашивать уже в разрезе этой темы и просто бы отвечать уже по этой теме. Вот. Также очень важно у нас это общение личным файлом. То есть если мы выберем личные файлы, сейчас мы видим на экране, что мы переключились в режим личных файлов, то у нас появилась кнопка «Добавить файлы». Дальше мы можем добавлять файлы для обучения ее Прасковье. Как добавлять файлы? Нажимаем «Создать». Мы можем выбрать файл с диска. Сейчас на экране мы видим окно выбора файла. Или выбрать файл из базы данных, если у Вас, конечно, к нему есть доступ. Давайте выберем какой-то файл порядок работы с Neocor, записать и закрыть. И таким образом мы видим уже когда Просковье был отправленный файл, когда он был или не был отработан на севере. Работает рекламное задание и необходимо подождать, чтобы Просковье обработала файлы. Это порядка, наверное, пяти минут, поэтому лучше добавить и обратиться к ним позже. Как можно узнать, что файлы добавлены? Это можно сделать в этом окне, увидеть, что файлы обработаны. Или можно в окне мессенджера Просковья ответить, что файлы были обработаны. Или они не были обработаны по какой-то причине, нужно разбираться. Вам придет сообщение, что файлы обработаны, по ним можно задавать вопросы. Какие еще у нас есть режимы? У нас есть режим непосредственного обращения к модели. Сейчас на экране вы видите выбор непосредственного обращения к мод. Можно просто пообщаться с моделью, написать ей что-то, и она ответит на произвольный вопрос. Фактически это в Телеграме аналог доллара. Вот она отвечает оперативно. Или можно вернуться к справке по работе с мессенджером. Вот такие есть основные способы взаимодействия. В принципе, все довольно просто. Главное понимать, что есть темы, и иногда нужно определить тему, по которой мы будем обсуждать в будущем. с мессенджером."

prompt = """
Ты — профессиональный редактор и технический писатель. Твоя задача — улучшить следующий текст, полученный из аудиозаписи видеоинструкции. Сделай его грамматически правильным, стилистически гладким, логически связным и литературно выдержанным, **полностью сохранив все исходные сведения**.

Правила обработки:
1. Удали слова-паразиты (например: "ну", "вот", "как бы", "это самое", "значит", "короче", "типа" и т.п.), но **не исключай ни одной смысловой детали**.
2. Исправь разговорные, нечёткие или грамматически неверные формулировки, переформулируй их ясно и профессионально, **не искажая смысла**.
3. Сохрани все технические термины, шаги, примеры, уточнения и повторы — даже если они кажутся избыточными.
4. Разбей текст на логические абзацы при необходимости, чтобы улучшить читаемость.
5. **Не добавляй** новые идеи, пояснения, комментарии или выводы.
6. **Не сокращай и не обобщай** — каждая мысль должна остаться, но быть выражена правильно и красиво.
7. Верни только улучшенный текст, без пояснений, заголовков или комментариев.
8. Предложения где есть фраза "сейчас на экране" не изменять
"""
prompt = prompt + " Вот текст для улчшения: " + full_text

#class_text_to_paragraphs = text_to_paragraphs(full_text)
#paragraphs = class_text_to_paragraphs.get_text_to_paragraphs_array()

llm = OllamaLLM(
    model="gpt-oss:latest", callback_manager=CallbackManager([StreamingStdOutCallbackHandler()]), temperature = "0.1")
#llm.invoke('''Назови столицу России''')
llm.invoke(prompt)