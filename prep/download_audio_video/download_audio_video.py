from playwright.sync_api import sync_playwright
import requests
import os

OUTPUT_DIR = "videoinput"


def download_file(url, path):
    response = requests.get(url, stream=True)
    response.raise_for_status()
    with open(path, "wb") as f:
        for chunk in response.iter_content(8192):
            f.write(chunk)


class SynologyDownloader:
    def __init__(self, video_page_url: str):
        self.video_page_url = video_page_url

    def download(self) -> str:
        video_url_holder = {"url": None}
        filename_holder = {"name": "downloaded_video.mp4"}

        with sync_playwright() as p:
            browser = p.chromium.launch(headless=True)
            context = browser.new_context()
            page = context.new_page()

            def handle_response(response):
                if response.request.resource_type == "media":
                    print("üéØ –ù–∞–π–¥–µ–Ω–∞ –º–µ–¥–∏–∞-—Å—Å—ã–ª–∫–∞:", response.url)
                    video_url_holder["url"] = response.url

            page.on("response", handle_response)

            print("üåê –û—Ç–∫—Ä—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
            page.goto(self.video_page_url)
            page.wait_for_timeout(3000)  # –ñ–¥—ë–º, —á—Ç–æ–±—ã meta —É—Å–ø–µ–ª –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è

            print("üîç –ü–æ–ª—É—á–∞—é –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ meta-—Ç–µ–≥–∞...")
            meta_tag = page.locator('meta[property="og:title"]').first
            if meta_tag:
                content = meta_tag.get_attribute("content")
                if content:
                    print("üìÅ –ò–º—è —Ñ–∞–π–ª–∞:", content)
                    filename_holder["name"] = content.strip()

            page.wait_for_timeout(5000)  # –ñ–¥—ë–º, –ø–æ–∫–∞ –ø–æ–π–º–∞–µ—Ç—Å—è video-—Å—Å—ã–ª–∫–∞
            browser.close()

        video_url = video_url_holder["url"]
        filename = filename_holder["name"]
        output_path = os.path.join(OUTPUT_DIR, filename)

        if video_url:
            print("‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...")
            download_file(video_url, output_path)
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
            return os.path.abspath(output_path)
        else:
            print("‚ùå –ú–µ–¥–∏–∞-—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return ""


class YandexDownloader:
    def __init__(self, public_url: str):
        self.public_url = public_url

    def _get_filename_from_api(self) -> str:
        api_info_url = f"https://cloud-api.yandex.net/v1/disk/public/resources?public_key={self.public_url}"
        response = requests.get(api_info_url)
        if response.status_code == 200:
            data = response.json()
            filename = data.get("name", "yadisk_downloaded_file")
            if not filename.lower().endswith(".mp4"):
                filename += ".mp4"
            return filename
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ API: {response.status_code}")
            return "yadisk_downloaded_file.mp4"

    def _download_file(self, file_url, path):
        response = requests.get(file_url, stream=True, allow_redirects=True)
        response.raise_for_status()
        with open(path, "wb") as f:
            for chunk in response.iter_content(8192):
                f.write(chunk)

    def download(self) -> str:
        print("üåê –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞...")
        api_url = f"https://cloud-api.yandex.net/v1/disk/public/resources/download?public_key={self.public_url}"
        response = requests.get(api_url)
        if response.status_code == 200:
            download_url = response.json()["href"]
            filename = self._get_filename_from_api()
            output_path = os.path.join(OUTPUT_DIR, filename)
            print(f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: {filename}...")
            self._download_file(download_url, output_path)
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
            return os.path.abspath(output_path)
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –æ—Ç –Ø–Ω–¥–µ–∫—Å–∞: {response.status_code}")
            return ""
