from playwright.sync_api import sync_playwright
import requests
import os
import re
from urllib.parse import urlparse, unquote
from typing import Optional, Dict, Any
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

OUTPUT_DIR = "videoinput"
os.makedirs(OUTPUT_DIR, exist_ok=True)


def sanitize_filename(name: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –æ—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    return re.sub(r'[<>:"/\\|?*\x00-\x1F]', '_', name)


def download_file(url: str, path: str, chunk_size: int = 8192) -> None:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
    response = requests.get(url, stream=True)
    response.raise_for_status()
    
    total_size = int(response.headers.get('content-length', 0))
    downloaded = 0
    
    with open(path, "wb") as f:
        for chunk in response.iter_content(chunk_size=chunk_size):
            if chunk:
                f.write(chunk)
                downloaded += len(chunk)
                if total_size > 0:
                    percent = (downloaded / total_size) * 100
                    print(f"\rüì• –ó–∞–≥—Ä—É–∑–∫–∞: {percent:.1f}% ({downloaded}/{total_size} bytes)", end='')
    
    print("\n‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


class SynologyDownloader:
    def __init__(self, video_page_url: str):
        self.video_page_url = video_page_url
        self.timeout = 30000
        self.browser_args = [
            "--ignore-certificate-errors",
            "--allow-insecure-localhost",
            "--disable-web-security"
        ]

    def _get_filename_from_page(self, page) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏–∑ –º–µ—Ç–∞-—Ç–µ–≥–æ–≤ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
        filename = "downloaded_video"
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ og:title
        try:
            og_title = page.evaluate("""() => {
                const meta = document.querySelector('meta[property="og:title"]');
                return meta ? meta.getAttribute('content') : null;
            }""")
            if og_title and og_title.strip():
                filename = og_title.strip()
                logger.info(f"üìå –ò—Å–ø–æ–ª—å–∑—É—é –∏–º—è –∏–∑ og:title: {filename}")
                return filename
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å og:title: {e}")

        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ title —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        try:
            title = page.title()
            if title and title.strip():
                filename = title.strip()
                logger.info(f"üìå –ò—Å–ø–æ–ª—å–∑—É—é –∏–º—è –∏–∑ title: {filename}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å title: {e}")

        return sanitize_filename(filename)

    def _find_player_frame(self, page):
        """–ü–æ–∏—Å–∫ iframe —Å Universal Viewer"""
        for frame in page.frames:
            try:
                if "uv.html" in frame.url:
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω iframe –ø–ª–µ–µ—Ä–∞: {frame.url}")
                    return frame
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ frame: {e}")
                continue
        return None

    def _find_download_button(self, frame):
        """–ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ Download –≤ iframe"""
        selectors = [
            'text=Download',
            '#ext-gen70',
            '#ext-comp-1047',
            'button:has-text("Download")',
            'a:has-text("Download")',
            '.x-btn-button:has-text("Download")'
        ]

        for sel in selectors:
            try:
                btn = frame.locator(sel).first
                if btn and btn.is_visible():
                    logger.info(f"‚úÖ –ù–∞—à–ª–∏ –∫–Ω–æ–ø–∫—É –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {sel}")
                    return btn
            except Exception as e:
                logger.debug(f"–°–µ–ª–µ–∫—Ç–æ—Ä {sel} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
                continue
        
        return None

    def download(self) -> str:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏"""
        video_url_holder = {"url": None}
        filename_holder = {"name": "downloaded_video"}

        with sync_playwright() as p:
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                browser = p.chromium.launch(
                    headless=True,
                    args=self.browser_args
                )
                
                context = browser.new_context(
                    ignore_https_errors=True,
                    accept_downloads=True,
                    viewport={'width': 1920, 'height': 1080}
                )
                
                page = context.new_page()

                logger.info("üåê –û—Ç–∫—Ä—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
                page.goto(self.video_page_url, timeout=self.timeout, wait_until='domcontentloaded')
                
                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
                page.wait_for_timeout(5000)

                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                filename = self._get_filename_from_page(page)
                filename_holder["name"] = filename

                # –ò—â–µ–º iframe —Å –ø–ª–µ–µ—Ä–æ–º
                player_frame = self._find_player_frame(page)
                if not player_frame:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ iframe —Å –ø–ª–µ–µ—Ä–æ–º")
                    browser.close()
                    return ""

                # –ò—â–µ–º –∫–Ω–æ–ø–∫—É Download
                download_button = self._find_download_button(player_frame)
                if not download_button:
                    logger.error("‚ùå –ö–Ω–æ–ø–∫–∞ 'Download' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    browser.close()
                    return ""

                # –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
                logger.info("üì• –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ 'Download'...")
                try:
                    with page.expect_download(timeout=15000) as download_info:
                        download_button.click()
                    
                    download = download_info.value
                    suggested_name = download.suggested_filename
                    logger.info(f"üìé –°–µ—Ä–≤–µ—Ä –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏–º—è: {suggested_name}")
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –∏–º—è –∏–ª–∏ –Ω–∞—à–µ
                    final_filename = suggested_name if suggested_name else f"{filename}.mov"
                    final_filename = sanitize_filename(final_filename)
                    
                    output_path = os.path.join(OUTPUT_DIR, final_filename)
                    download.save_as(output_path)
                    
                    logger.info(f"üéâ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {output_path}")
                    return os.path.abspath(output_path)

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")
                    # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
                    return self._fallback_download_method(page, filename)

            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                return ""

    def _fallback_download_method(self, page, filename: str) -> str:
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Ö–≤–∞—Ç –º–µ–¥–∏–∞-–æ—Ç–≤–µ—Ç–æ–≤"""
        logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏...")
        
        video_url_holder = {"url": None}
        
        def handle_response(response):
            if response.request.resource_type == "media":
                video_url = response.url
                if video_url and not video_url_holder["url"]:
                    video_url_holder["url"] = video_url
                    logger.info(f"üé¨ –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ: {video_url}")

        page.on("response", handle_response)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞
        page.reload(timeout=self.timeout)
        page.wait_for_timeout(10000)

        video_url = video_url_holder["url"]
        if video_url:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            resp_head = requests.head(video_url, allow_redirects=True, verify=False)
            content_type = resp_head.headers.get("Content-Type", "").lower()
            ext_map = {
                "video/mp4": ".mp4",
                "video/quicktime": ".mov",
                "video/webm": ".webm",
                "video/x-matroska": ".mkv"
            }
            ext = ext_map.get(content_type, ".mov")
            
            if not filename.endswith(ext):
                filename += ext
            
            output_path = os.path.join(OUTPUT_DIR, filename)
            download_file(video_url, output_path)
            logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
            return os.path.abspath(output_path)
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ")
            return ""

    def set_timeout(self, timeout_ms: int) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞"""
        self.timeout = timeout_ms

    def add_browser_arg(self, arg: str) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –±—Ä–∞—É–∑–µ—Ä–∞"""
        self.browser_args.append(arg)


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    downloader = SynologyDownloader(
        "https://pro-1c-virtualnas.direct.quickconnect.to:5001/d/s/14Fcxa6WJMw96JQUCRB7lPLEuIoRptvU/zFh_5S--OFIGZs-B0NaiNL_icd4HlUOm-s7SAj3ZJcgw"
    )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    downloader.set_timeout(40000)
    downloader.add_browser_arg("--disable-gpu")
    
    result = downloader.download()
    if result:
        print(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {result}")
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª")